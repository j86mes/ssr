var e=globalThis,t={},i={},h=e.parcelRequire9503;null==h&&((h=function(e){if(e in t)return t[e].exports;if(e in i){var h=i[e];delete i[e];var r={id:e,exports:{}};return t[e]=r,h.call(r.exports,r,r.exports),r.exports}var s=Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=function(e,t){i[e]=t},e.parcelRequire9503=h);var r=h.register;r("jjjrG",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.createFullSizeCanvasAndReturnWithWebGlContextAndResizeCallback=e.exports.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=e.exports.createFixedSizeCanvasAndReturnWithContext=void 0,e.exports.createFixedSizeCanvasAndReturnWithContext=(e,t,i,h)=>{let r=document.createElement("canvas");return t.appendChild(r),r.id=e,r.width=i,r.height=h,{context:r.getContext("2d"),canvas:r}},e.exports.createFullSizeCanvasAndReturnWithWebGlContextAndResizeCallback=(e,t)=>i(e,t,"webgl"),e.exports.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=(e,t)=>i(e,t,"2d");let i=(e,t,i)=>{let r=h(t),s=document.createElement("canvas");t.appendChild(s),s.id=e,s.width=r.width,s.height=r.height;let a={context:s.getContext(i),canvas:s,resizeCallback:()=>{r=h(t),(s.width!==r.width||s.height!==r.height)&&(s.width=r.width,s.height=r.height)}};return a},h=e=>{let t={width:e.clientWidth,height:e.clientHeight};return t}}),r("i1tWs",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.BasicObject=e.exports.translateCoordinatesToCameraSpace=e.exports.getTranslatedCoordinates=e.exports.clone=void 0;var i=h("2Ru5L");e.exports.clone=e=>Object.assign({},e),e.exports.getTranslatedCoordinates=(e,t)=>({renderX:e.renderX,renderY:t.canvas.height-e.renderY-e.renderHeight}),e.exports.translateCoordinatesToCameraSpace=(e,t)=>({renderX:e.renderX-t.frameX,renderY:e.renderY-t.frameY,renderWidth:e.renderWidth,renderHeight:e.renderHeight});class r extends i.PhysicsObject{constructor(e,t,i,h){super(e,t,i,h),this.sourceX=0,this.sourceY=0,this.sourceWidth=0,this.sourceHeight=0,this.circle=!1,this.colour="rgba(0, 0, 0, 0.3)",this.renderX=e,this.renderY=t,this.renderWidth=i,this.renderHeight=h}}e.exports.BasicObject=r}),r("2Ru5L",function(e,t){var i=e.exports&&e.exports.__createBinding||(Object.create?function(e,t,i,h){void 0===h&&(h=i);var r=Object.getOwnPropertyDescriptor(t,i);(!r||("get"in r?!t.__esModule:r.writable||r.configurable))&&(r={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,h,r)}:function(e,t,i,h){void 0===h&&(h=i),e[h]=t[i]}),r=e.exports&&e.exports.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=e.exports&&e.exports.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var h in e)"default"!==h&&Object.prototype.hasOwnProperty.call(e,h)&&i(t,e,h);return r(t,e),t};Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.PhysicsObject=void 0;let a=s(h("i1tWs"));e.exports.PhysicsObject=class{constructor(e=0,t=0,i=100,h=100,r=0,s=0,a=!0,l=1){this.id=0,this.x=this.xPrevious=e,this.y=this.yPrevious=t,this.width=i,this.height=h,this.vectorX=r,this.vectorY=s,this.obeysGravity=a,this.gravityScale=l}applyDelta(e,t){l(this,e,t)}createNewFromDelta(e,t){return d(this,e,t)}};let l=(e,t,i)=>{e.xPrevious=e.x,e.yPrevious=e.y,n(e,t,i),o(e,i)},d=(e,t,i)=>{let h=a.clone(e);return l(h,t,i),h},o=(e,t)=>{e.x=e.x+e.vectorX*t,e.y=e.y+e.vectorY*t},n=(e,t,i)=>{e.obeysGravity&&(e.vectorY=Math.max(t.minVerticalVelocityPerSecond*e.gravityScale,e.vectorY+=t.gravityAccelerationPerSecond*i*e.gravityScale))}}),r("5PnyD",function(e,t){var i,h;Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.CollisionSide=e.exports.checkImpactSideOfMovingAabbOnStaticAabb=e.exports.doAabbsOverlap=void 0,(h=i||(e.exports.CollisionSide=i={})).Bottom="BOTTOM",h.Top="TOP",h.Left="LEFT",h.Right="RIGHT",e.exports.doAabbsOverlap=(e,t,i,h,r,s,a,l)=>{let d=!1;return e<r+a&&e+i>r&&t<s+l&&t+h>s&&(d=!0),d},e.exports.checkImpactSideOfMovingAabbOnStaticAabb=(e,t,h,a,l,d,o,n,c,y)=>{let x=h-e,g=a-t;if(0===x&&0===g)return null;//one direction of travel is easy to work out!
if(0==x){let e=g>0?i.Bottom:i.Top;return e}if(0==g){let e=x>0?i.Left:i.Right;return e}if(x>0&&g<0){let{xFactor:d,offset:c}=r(e+l,t,h+l,a),x=s(d,c,o),g=n+y<=x?i.Top:i.Left;return g}if(x<0&&g<0){//bottom left of moving object and top right corner of static object
let{xFactor:l,offset:d}=r(e,t,h,a),x=s(l,d,o+c);return n+y<=x?i.Top:i.Right}if(x>0&&g>0){let{xFactor:c,offset:y}=r(e+l,t+d,h+l,a+d),x=s(c,y,o),g=n>=x?i.Bottom:i.Left;return g}if(x<0&&g>0){//top left of moving object and bottom right corner of static object
let{xFactor:l,offset:y}=r(e,t+d,h,a+d),x=s(l,y,o+c);return n>=x?i.Bottom:i.Right}// we won't get here but typescript complains.
return null};let r=(e,t,i,h)=>{//this is the factor for multiplying X to find Y based on the direction of the line (the steepness and direction/angle of the line)
let r=(h-t)/(i-e);return{xFactor:r,offset:t-r*e}},s=(e,t,i)=>t+i*e}),r("gLy79",function(e,t){var i=e.exports&&e.exports.__createBinding||(Object.create?function(e,t,i,h){void 0===h&&(h=i);var r=Object.getOwnPropertyDescriptor(t,i);(!r||("get"in r?!t.__esModule:r.writable||r.configurable))&&(r={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,h,r)}:function(e,t,i,h){void 0===h&&(h=i),e[h]=t[i]}),r=e.exports&&e.exports.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=e.exports&&e.exports.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var h in e)"default"!==h&&Object.prototype.hasOwnProperty.call(e,h)&&i(t,e,h);return r(t,e),t};Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.CollisionSide=e.exports.checkImpactSideOfMovingAabbOnStaticAabb=e.exports.doesAabbOverlapOccurInCurrentDelta=e.exports.doAabbsOverlap=void 0;let a=s(h("5PnyD")),l=a.CollisionSide;e.exports.CollisionSide=l,e.exports.doAabbsOverlap=(e,t)=>a.doAabbsOverlap(e.x,e.y,e.width,e.height,t.x,t.y,t.width,t.height),e.exports.doesAabbOverlapOccurInCurrentDelta=(e,t)=>{let i=!1;return!1===a.doAabbsOverlap(e.xPrevious,e.yPrevious,e.width,e.height,t.xPrevious,t.yPrevious,t.width,t.height)&&(i=a.doAabbsOverlap(e.x,e.y,e.width,e.height,t.x,t.y,t.width,t.height)),i},e.exports.checkImpactSideOfMovingAabbOnStaticAabb=(e,t)=>a.checkImpactSideOfMovingAabbOnStaticAabb(e.xPrevious,e.yPrevious,e.x,e.y,e.width,e.height,t.x,t.y,t.width,t.height)}),r("cYJ8Y",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.Pipeline=void 0,e.exports.Pipeline=class{constructor(e){this.pipeline=[],this.canvasContext=e}addPipe(e){this.pipeline=this.pipeline.concat(e)}execute(e,t){let i={canvasContext:this.canvasContext,gameState:t};for(let t of this.pipeline)t.executeDelta(e,i)}}}),r("1Qh2U",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.renderRotatedSprite=e.exports.renderSprite=e.exports.renderCircle=e.exports.renderRotatedRect=e.exports.renderRect=void 0;// let tempDataForFrame:ITempData;
// export const setTempData = (tempData:Pipeline.ITempData) => {
// 	tempDataForFrame = tempData;
// }
// // convert to render size (this is used to keep the game a specific width)
// export const crs = (renderSize:number) => {
// 	let output = renderSize;
// 	if(tempDataForFrame['displayRatio']){
// 		output = output * tempDataForFrame['displayRatio'];
// 	}
// 	return output;
// }
// export const getTranslatedCoordinatesWithClip = (graphicItem:{renderX:number, renderY:number, renderWidth:number, renderHeight:number}, canvasContext) : {renderX:number, renderY:number, renderWidth:number, renderHeight:number} => {
// 	let height = canvasContext.canvas.width / ASPECT_RATIO;
// 	let offset = 0;
// 	if(canvasContext.canvas.height > height){
// 		offset = (canvasContext.canvas.height - height);
// 	}
// 	let newCooords = {
// 		renderX: crs(graphicItem.renderX), 
// 		//renderY: offset + crs(height - graphicItem.renderY - graphicItem.renderHeight),
// 		renderY: canvasContext.canvas.height - offset - crs(graphicItem.renderY) - crs(graphicItem.renderHeight),
// 		renderWidth: crs(graphicItem.renderWidth),
// 		renderHeight: crs(graphicItem.renderHeight)
// 	};
// 	return newCooords;
// }
let i=(e,t,i)=>{let h=(i.canvas.height-t.frameHeight*t.pixelToFrameRatio)/2,r=(e.renderY+e.renderHeight)*t.pixelToFrameRatio,s=i.canvas.height-h-r;return{renderX:t.xOffset+(e.renderX-t.frameX)*t.pixelToFrameRatio,renderY:s,renderWidth:e.renderWidth*t.pixelToFrameRatio,renderHeight:e.renderHeight*t.pixelToFrameRatio}};e.exports.renderRect=(e,t,h)=>{h.beginPath(),h.fillStyle=e.colour;let r=i(e,t,h);//const translateCoordinatesForCanvas = getTranslatedCoordinates(p, ctx);
//ctx.fillRect(p.x - camera.x, p.y - camera.y, p.width, p.height);
h.fillRect(r.renderX,r.renderY,r.renderWidth,r.renderHeight)},e.exports.renderRotatedRect=(e,t,h,r)=>{// save ctx so we can undo our mods
r.save(),r.beginPath(),r.fillStyle=e.colour;let s=i(e,h,r);// move to the center of the sprite for rotation
r.translate(s.renderX+s.renderWidth/2,s.renderY+s.renderHeight/2),// rotate at center
r.rotate((360-t)*Math.PI/180),//const translateCoordinatesForCanvas = getTranslatedCoordinates(p, ctx);
//ctx.fillRect(p.x - camera.x, p.y - camera.y, p.width, p.height);
r.fillRect(-s.renderWidth/2,-s.renderHeight/2,s.renderWidth,s.renderHeight),// undo our mods
r.restore()},e.exports.renderCircle=(e,t,h)=>{h.beginPath(),h.fillStyle=e.colour;let r=i(e,t,h);h.arc(r.renderX+r.renderWidth/2,r.renderY+r.renderWidth/2,r.renderWidth/2,0,2*Math.PI),h.fill()},e.exports.renderSprite=(e,t,h)=>{h.beginPath();let r=i(e,t,h);h.drawImage(e.source,e.sourceX,e.sourceY,e.sourceWidth,e.sourceHeight,r.renderX,r.renderY,r.renderWidth,r.renderHeight)},e.exports.renderRotatedSprite=(e,t,h,r)=>{// save ctx so we can undo our mods
r.save(),r.beginPath();let s=i(e,h,r);// move to the center of the sprite for rotation
r.translate(s.renderX+s.renderWidth/2,s.renderY+s.renderHeight/2),// rotate at center
r.rotate((360-t)*Math.PI/180),// move back
r.translate(-(s.renderX+s.renderWidth/2),-(s.renderY+s.renderHeight/2)),r.drawImage(e.source,e.sourceX,e.sourceY,e.sourceWidth,e.sourceHeight,s.renderX,s.renderY,s.renderWidth,s.renderHeight),// undo our mods
r.restore()}});//import * as canvasCreator from "../canvas/canvas";
//import sceneManager from "./scenes/scene-manager"
//import createFullSizeCanvasAndReturnWith2DContextAndResizeCallback from "rewind";
var s=h("jjjrG"),a={},l=a&&a.__createBinding||(Object.create?function(e,t,i,h){void 0===h&&(h=i);var r=Object.getOwnPropertyDescriptor(t,i);(!r||("get"in r?!t.__esModule:r.writable||r.configurable))&&(r={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,h,r)}:function(e,t,i,h){void 0===h&&(h=i),e[h]=t[i]}),d=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&l(t,e,i);return d(t,e),t};Object.defineProperty(a,"__esModule",{value:!0}),a.Renderer=a.Canvas=a.Pipeline=a.PhysicsCollisions=a.Collisions=a.VariableStepRunner=a.PhysicsObject=a.BaseScene=a.Particle=a.GameStateStack=a.Shake=a.Camera=a.BasicObject=a.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=void 0;var n={};Object.defineProperty(n,"__esModule",{value:!0}),n.Camera=void 0,n.Camera=class{constructor(e,t,i,h,r){this.x=0,this.y=0,this.frameX=0,this.frameY=0,this.aspectRatio=16/9,this.xOffset=0,this.yOffset=0,this.pixelToFrameRatio=1,this.setCanvasSize=e=>{this.pixelToFrameRatio=1,this.containWidth&&this.containHeight?(this.pixelToFrameRatio=e.canvas.width/this.frameWidth,this.pixelToFrameRatio=Math.min(this.pixelToFrameRatio,e.canvas.height/this.frameHeight),this.xOffset=(e.canvas.width-this.frameWidth*this.pixelToFrameRatio)/2,this.yOffset=(e.canvas.height-this.frameHeight*this.pixelToFrameRatio)/2):this.containWidth?(this.pixelToFrameRatio=e.canvas.width/this.frameWidth,this.xOffset=(e.canvas.width-this.frameWidth*this.pixelToFrameRatio)/2,this.yOffset=0):this.containHeight&&(this.pixelToFrameRatio=e.canvas.height/this.frameHeight,this.yOffset=(e.canvas.height-this.frameHeight*this.pixelToFrameRatio)/2,this.xOffset=0)},this.containWidth=e,this.containHeight=t,this.frameWidth=i,this.frameHeight=h,this.setCanvasSize(r)}},Object.defineProperty(a,"Camera",{enumerable:!0,get:function(){return n.Camera}});var c={};Object.defineProperty(c,"__esModule",{value:!0}),c.createObjectFromDelta=c.Shake=void 0;var y=h("i1tWs");class x extends y.BasicObject{constructor(e,t){super(0,0,0,0),this.remove=!1,this.scale=e,this.life=t,this.shakeDelta=0}applyDelta(e,t){g(this,e,t)}}c.Shake=x;const g=(e,t,i)=>{e.shakeDelta+=i;let h=1-e.shakeDelta/e.life;Math.random()>=.5?e.x=5*e.scale*h:e.x=-5*e.scale*h,Math.random()>=.5?e.y=5*e.scale*h:e.y=-5*e.scale*h,e.shakeDelta>=e.life&&(e.remove=!0)};c.createObjectFromDelta=(e,t,i)=>{let h=(0,y.clone)(e);return g(h,t,i),h},Object.defineProperty(a,"Shake",{enumerable:!0,get:function(){return c.Shake}});var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.GameStateStack=void 0,w.GameStateStack=class{constructor(e=3e3){this.states=[],this.stackDelta=0,this.maxStackSize=e}addState(e){p(e,this)}hasOlderState(){return v(this)}getPreviousState(){return u(this)}hasNewerState(){return f(this)}getNextState(){return b(this)}popStateFromStack(){return m(this)}};const p=(e,t)=>{t.stackDelta=0,t.states.push(e),t.states.length>t.maxStackSize&&t.states.shift()},u=e=>{if(e.hasOlderState()){e.stackDelta=e.stackDelta+3;let t=e.states.length-e.stackDelta;return t<0&&(e.stackDelta=e.states.length,t=e.stackDelta),e.states[t]}return null},f=e=>e.stackDelta>1,v=e=>e.stackDelta+3<=e.states.length,m=e=>{for(let t=0;t<3&&e.states.length>1;t++)e.states.pop();e.stackDelta=0;let t=e.states.length-1;return e.states[t]},b=e=>{if(e.hasNewerState()){e.stackDelta=e.stackDelta-1;let t=e.states.length-e.stackDelta;return e.states[t]}return null};Object.defineProperty(a,"GameStateStack",{enumerable:!0,get:function(){return w.GameStateStack}});var S={};Object.defineProperty(S,"__esModule",{value:!0}),S.Particle=void 0;var y=h("i1tWs");class P extends y.BasicObject{constructor(e,t,i,h,r,s,a,l,d,o,n,c,y,x){super(e,t,i,h),this.sourceX=0,this.sourceY=0,this.sourceWidth=0,this.sourceHeight=0,this.xAcceleration=0,this.yAcceleration=0,this.alive=!0,this.originalRenderX=e,this.originalRenderY=t,this.renderWidth=i,this.renderHeight=h,this.renderX=e-this.renderWidth/2,this.renderY=t-this.renderHeight/2,this.vectorX=a,this.vectorY=l,//this.xAcceleration = xAcceleration;
//this.yAcceleration = yAcceleration;
this.lifeDelta=0,this.lifetimeInSeconds=x,this.initialWidth=i,this.initialHeight=h,this.finalWidth=r,this.finalHeight=s,this.opacity=d,this.initialOpacity=d,this.finalOpacity=o,this.red=n,this.green=c,this.blue=y}applyDelta(e,t){this.lifeDelta+=t,this.lifeDelta>this.lifetimeInSeconds&&(this.alive=!1),this.obeysGravity,super.applyDelta(e,t),this.renderX=this.x,this.renderY=this.y;let i=this.lifeDelta/this.lifetimeInSeconds;this.width=this.renderWidth=this.initialWidth+(this.finalWidth-this.initialWidth)*i,this.height=this.renderHeight=this.initialHeight+(this.finalHeight-this.initialHeight)*i,this.obeysGravity,this.opacity=this.initialOpacity+(this.finalOpacity-this.initialOpacity)*i,this.colour=`rgba(${this.red},${this.green},${this.blue},${this.opacity})`}}S.Particle=P,Object.defineProperty(a,"Particle",{enumerable:!0,get:function(){return S.Particle}});var C={};Object.defineProperty(C,"__esModule",{value:!0}),C.BaseScene=void 0,C.BaseScene=class{constructor(){this.stop=()=>{},this.addSceneSubscriber=e=>{this.subscribers.push(e)},this.removeSceneSubscriber=e=>{this.subscribers.splice(this.subscribers.findIndex(t=>t===e),1)},this.complete=()=>{this.subscribers.forEach(e=>{e.sceneComplete(this)})},this.subscribers=[]}},Object.defineProperty(a,"BaseScene",{enumerable:!0,get:function(){return C.BaseScene}});var y=h("i1tWs");Object.defineProperty(a,"BasicObject",{enumerable:!0,get:function(){return y.BasicObject}});var O=h("2Ru5L");Object.defineProperty(a,"PhysicsObject",{enumerable:!0,get:function(){return O.PhysicsObject}}),Object.defineProperty(a,"createFullSizeCanvasAndReturnWith2DContextAndResizeCallback",{enumerable:!0,get:function(){return h("jjjrG").createFullSizeCanvasAndReturnWith2DContextAndResizeCallback}});const D=o(h("jjjrG"));a.Canvas=D;//import * as Physics from "./physics/physics";
const R=o(h("5PnyD"));a.Collisions=R;const j=o(h("gLy79"));a.PhysicsCollisions=j;const A=o(h("cYJ8Y"));a.Pipeline=A;var M={};Object.defineProperty(M,"__esModule",{value:!0}),M.VariableStepRunner=void 0,M.VariableStepRunner=class{constructor(e,t=1/120,i=.1){this._lastStepCall=new Date,this.shouldRun=!0,this.lastDelta=-1,this.callStep=e=>{//const now = new Date();
//let deltaInSeconds = (now.getTime() - _lastStepCall.getTime())/1000;
let t=e/1e3;t-=this.lastDelta,this.lastDelta=e/1e3,t=t>this.maximumDeltaInSeconds?this.maximumDeltaInSeconds:t,!0===this.shouldRun&&(window.requestAnimationFrame(e=>{this.callStep(e)}),this.stepAction(t))},this.stop=()=>{this.shouldRun=!1},this.minimumDeltaInSeconds=t,this.maximumDeltaInSeconds=i,this.stepAction=e,this._lastStepCall.setSeconds(this._lastStepCall.getMilliseconds()-100),window.requestAnimationFrame(e=>{this.callStep(e)})}},Object.defineProperty(a,"VariableStepRunner",{enumerable:!0,get:function(){return M.VariableStepRunner}});const k=o(h("1Qh2U"));a.Renderer=k;class W{constructor(e){this.particles=[],this.lastParticleDelta=0,this.nextParticleDueAt=0,this.createNewParticle=e=>{//let x = camera.x + ctx.canvas.width*3 * Math.random();
let t=e.x+3*e.frameWidth*Math.random(),i=e.frameHeight+50,h=5+5*Math.random(),r=new a.Particle(t,i,h,h,h,h,-40+-40*Math.random(),-30*Math.random(),1,1,255,255,255,200);return r.gravityScale=.05+.15*Math.random(),r};for(let t=0;t<40;t++){//let x = ctx.canvas.width * Math.random();
let t=2500*Math.random(),i=(e.frameHeight+50)*Math.random(),h=-40+-40*Math.random(),r=-30*Math.random(),s=.05+.15*Math.random(),l=5+5*Math.random(),d=new a.Particle(t,i,l,l,l,l,h,r,1,1,255,255,255,200);d.gravityScale=s,this.particles.push(d)}}applyDelta(e,t,i){for(let i=this.particles.length-1;i>=0;i--){let h=this.particles[i];h.applyDelta(e,t),h.alive||this.particles.splice(i,1)}this.lastParticleDelta>=this.nextParticleDueAt&&(this.lastParticleDelta=0,this.nextParticleDueAt=.02*Math.random(),this.particles.push(this.createNewParticle(i))),this.particles.length>500&&this.particles.splice(0,this.particles.length-500),this.lastParticleDelta+=t}}const _={platforms:[{x:-1472,y:512,width:7552,height:128},{x:7072,y:448,width:7168,height:192},{x:14432,y:384,width:320,height:256},{x:14944,y:320,width:384,height:320},{x:15488,y:416,width:384,height:224},{x:16032,y:512,width:576,height:128},{x:16960,y:352,width:800,height:288},{x:17856,y:512,width:1152,height:128},{x:6304,y:512,width:736,height:128},{x:19136,y:512,width:4768,height:128},{x:24064,y:512,width:7808,height:128}],obstacles:[{x:0,y:640,width:224,height:256},{x:6048,y:640,width:288,height:256},{x:14208,y:640,width:288,height:256},{x:14624,y:640,width:448,height:256},{x:15328,y:640,width:992,height:256},{x:16576,y:640,width:1344,height:256},{x:18976,y:640,width:192,height:256},{x:11936,y:384,width:64,height:64},{x:8928,y:320,width:64,height:128},{x:11584,y:224,width:64,height:64},{x:10752,y:384,width:64,height:64},{x:19936,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:23264,y:448,width:64,height:64},{x:23840,y:640,width:256,height:256},{x:2368,y:448,width:64,height:64},{x:3968,y:448,width:64,height:64},{x:4864,y:448,width:64,height:64},{x:22336,y:448,width:64,height:64},{x:21472,y:448,width:64,height:64},{x:13344,y:320,width:64,height:128},{x:25728,y:384,width:64,height:128},{x:27360,y:384,width:64,height:128},{x:28288,y:448,width:64,height:64},{x:31840,y:640,width:160,height:256},{x:6912,y:640,width:288,height:256}],loadPoint:[{x:29984,y:0,width:32,height:32}]},H={obstacles:[{x:0,y:640,width:224,height:256},{x:4736,y:640,width:416,height:256},{x:5344,y:640,width:256,height:256},{x:6688,y:640,width:256,height:256},{x:13088,y:640,width:160,height:256},{x:14112,y:640,width:224,height:256},{x:14592,y:640,width:288,height:256},{x:16256,y:640,width:992,height:256},{x:17792,y:640,width:448,height:256},{x:19680,y:640,width:448,height:256},{x:24992,y:384,width:64,height:128},{x:2400,y:448,width:64,height:64},{x:768,y:448,width:64,height:64},{x:1856,y:448,width:64,height:64},{x:1312,y:448,width:64,height:64},{x:4032,y:448,width:64,height:64},{x:3488,y:448,width:64,height:64},{x:2944,y:448,width:64,height:64},{x:18688,y:448,width:64,height:64},{x:19680,y:448,width:64,height:64},{x:20832,y:448,width:64,height:64},{x:21376,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23552,y:448,width:64,height:64},{x:8096,y:480,width:64,height:64},{x:7552,y:480,width:64,height:64},{x:10368,y:448,width:64,height:64},{x:9824,y:448,width:64,height:64},{x:10912,y:448,width:64,height:64},{x:12320,y:448,width:64,height:64},{x:11776,y:448,width:64,height:64},{x:26176,y:384,width:64,height:128},{x:27264,y:384,width:64,height:128},{x:28160,y:448,width:64,height:64},{x:28928,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:24096,y:640,width:288,height:256},{x:15680,y:640,width:224,height:256},{x:15136,y:640,width:288,height:256},{x:9184,y:640,width:160,height:256},{x:6112,y:640,width:256,height:256}],platforms:[{x:64,y:512,width:4704,height:128},{x:4896,y:448,width:480,height:192},{x:5536,y:384,width:640,height:256},{x:13184,y:320,width:960,height:320},{x:14304,y:320,width:320,height:320},{x:14784,y:320,width:384,height:320},{x:15328,y:320,width:384,height:320},{x:15872,y:512,width:608,height:128},{x:16608,y:512,width:320,height:128},{x:17088,y:512,width:800,height:128},{x:18080,y:512,width:1664,height:128},{x:19872,y:512,width:4288,height:128},{x:24320,y:512,width:1600,height:128},{x:6272,y:448,width:480,height:192},{x:6848,y:544,width:2368,height:96},{x:9312,y:512,width:3808,height:128},{x:26176,y:512,width:5728,height:128}]},X={obstacles:[{x:0,y:640,width:224,height:256},{x:7040,y:640,width:448,height:256},{x:16512,y:640,width:384,height:256},{x:18912,y:640,width:448,height:256},{x:24992,y:384,width:64,height:128},{x:3904,y:448,width:64,height:64},{x:4032,y:384,width:64,height:128},{x:18880,y:448,width:64,height:64},{x:18976,y:384,width:64,height:128},{x:20832,y:448,width:64,height:64},{x:21376,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23552,y:448,width:64,height:64},{x:8672,y:416,width:64,height:128},{x:7584,y:416,width:64,height:128},{x:26176,y:384,width:64,height:128},{x:27264,y:384,width:64,height:128},{x:28160,y:448,width:64,height:64},{x:28928,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:23584,y:640,width:640,height:256},{x:15840,y:640,width:224,height:256},{x:9184,y:640,width:160,height:256},{x:6464,y:640,width:256,height:256},{x:2048,y:96,width:64,height:64},{x:4352,y:640,width:416,height:256},{x:3904,y:640,width:320,height:256},{x:2400,y:640,width:384,height:256},{x:1792,y:640,width:288,height:256},{x:6624,y:384,width:64,height:64},{x:11872,y:384,width:64,height:128},{x:13216,y:384,width:64,height:64},{x:10464,y:640,width:448,height:288},{x:12032,y:640,width:160,height:288},{x:13248,y:640,width:224,height:256},{x:14592,y:640,width:448,height:256},{x:15808,y:384,width:64,height:128},{x:17696,y:384,width:64,height:64},{x:17824,y:384,width:64,height:128},{x:13440,y:256,width:64,height:64}],platforms:[{x:64,y:512,width:1024,height:128},{x:13440,y:320,width:960,height:320},{x:14400,y:256,width:288,height:384},{x:16832,y:448,width:928,height:192},{x:17760,y:512,width:1280,height:128},{x:19328,y:512,width:4288,height:128},{x:24192,y:512,width:1792,height:128},{x:6624,y:448,width:736,height:192},{x:7456,y:544,width:2240,height:96},{x:9696,y:416,width:864,height:224},{x:26176,y:512,width:5728,height:128},{x:1088,y:352,width:736,height:288},{x:2048,y:160,width:448,height:480},{x:2720,y:512,width:1376,height:128},{x:4192,y:288,width:352,height:352},{x:10688,y:288,width:64,height:352},{x:10880,y:512,width:1184,height:128},{x:12160,y:512,width:1056,height:128},{x:13216,y:448,width:64,height:192},{x:14912,y:512,width:1632,height:128},{x:4672,y:384,width:1856,height:256}]},F={obstacles:[{x:0,y:640,width:224,height:320},{x:4864,y:640,width:416,height:320},{x:12800,y:640,width:384,height:320},{x:14080,y:640,width:288,height:320},{x:14624,y:640,width:352,height:320},{x:15296,y:640,width:320,height:320},{x:16768,y:640,width:1632,height:320},{x:9440,y:384,width:64,height:64},{x:8928,y:384,width:64,height:64},{x:8416,y:384,width:64,height:64},{x:10656,y:384,width:64,height:64},{x:10752,y:320,width:64,height:128},{x:12096,y:384,width:64,height:64},{x:22816,y:448,width:64,height:64},{x:20128,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:21760,y:384,width:64,height:128},{x:23360,y:448,width:64,height:64},{x:23904,y:448,width:64,height:64},{x:1600,y:640,width:192,height:320},{x:2816,y:640,width:128,height:320},{x:3488,y:480,width:64,height:64},{x:3648,y:480,width:64,height:64},{x:6112,y:416,width:64,height:128},{x:7136,y:640,width:544,height:352},{x:18656,y:640,width:640,height:320},{x:21792,y:640,width:384,height:320},{x:15936,y:640,width:320,height:320},{x:30432,y:640,width:448,height:320},{x:29408,y:640,width:384,height:320},{x:26752,y:640,width:384,height:320},{x:25088,y:448,width:64,height:64},{x:25536,y:448,width:64,height:64},{x:26048,y:448,width:64,height:64},{x:31840,y:640,width:160,height:320},{x:23936,y:640,width:256,height:320},{x:3968,y:480,width:64,height:64},{x:3808,y:480,width:64,height:64},{x:4736,y:480,width:64,height:64},{x:5184,y:480,width:64,height:64},{x:4896,y:480,width:64,height:64},{x:9952,y:384,width:64,height:64},{x:11840,y:320,width:64,height:128},{x:11744,y:384,width:64,height:64},{x:16224,y:448,width:64,height:64},{x:15424,y:320,width:64,height:128},{x:14752,y:352,width:64,height:64}],platforms:[{x:32,y:512,width:1600,height:128},{x:1760,y:448,width:1088,height:192},{x:7648,y:448,width:5184,height:192},{x:13152,y:448,width:960,height:192},{x:14336,y:384,width:320,height:256},{x:14944,y:384,width:384,height:256},{x:15584,y:320,width:384,height:320},{x:16224,y:512,width:576,height:128},{x:17184,y:512,width:320,height:128},{x:18368,y:512,width:320,height:128},{x:19264,y:512,width:2560,height:128},{x:22144,y:512,width:1824,height:128},{x:24160,y:512,width:2624,height:128},{x:2912,y:544,width:2048,height:96},{x:5120,y:544,width:2048,height:96},{x:27104,y:512,width:2336,height:128},{x:29760,y:512,width:704,height:128},{x:30848,y:512,width:1024,height:128},{x:24960,y:192,width:1408,height:64},{x:17760,y:512,width:320,height:128},{x:15424,y:448,width:64,height:192},{x:14752,y:416,width:64,height:224}]},I={obstacles:[{x:0,y:640,width:224,height:256},{x:7264,y:640,width:576,height:256},{x:16512,y:640,width:384,height:256},{x:24992,y:384,width:64,height:128},{x:3488,y:448,width:64,height:64},{x:3616,y:384,width:64,height:128},{x:18880,y:448,width:64,height:64},{x:19200,y:448,width:64,height:64},{x:20416,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23328,y:448,width:64,height:64},{x:8672,y:384,width:64,height:128},{x:26176,y:384,width:64,height:128},{x:27392,y:384,width:64,height:128},{x:28320,y:448,width:64,height:64},{x:28640,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:23040,y:640,width:1184,height:256},{x:6016,y:640,width:704,height:192},{x:2144,y:640,width:704,height:192},{x:1056,y:640,width:736,height:256},{x:12160,y:448,width:64,height:64},{x:10464,y:640,width:1568,height:288},{x:12032,y:640,width:1920,height:288},{x:15040,y:384,width:64,height:128},{x:17696,y:384,width:64,height:64},{x:17824,y:384,width:64,height:128},{x:4544,y:448,width:64,height:64},{x:4864,y:448,width:64,height:64},{x:12352,y:448,width:64,height:64},{x:15232,y:384,width:64,height:128},{x:16544,y:384,width:64,height:128},{x:16832,y:384,width:64,height:64},{x:19328,y:448,width:64,height:64},{x:13920,y:448,width:64,height:64},{x:22144,y:640,width:352,height:256},{x:20448,y:640,width:416,height:256},{x:21184,y:640,width:448,height:256},{x:28480,y:448,width:64,height:64},{x:27296,y:384,width:64,height:128}],platforms:[{x:64,y:512,width:1024,height:128},{x:13920,y:512,width:2688,height:128},{x:16832,y:448,width:928,height:192},{x:17760,y:512,width:2720,height:128},{x:23680,y:512,width:2240,height:128},{x:6688,y:512,width:608,height:128},{x:7808,y:512,width:2688,height:128},{x:26176,y:512,width:5728,height:128},{x:1728,y:512,width:448,height:128},{x:2816,y:512,width:3232,height:128},{x:10880,y:512,width:96,height:128},{x:11360,y:512,width:96,height:128},{x:11840,y:512,width:128,height:128},{x:12128,y:512,width:96,height:128},{x:20832,y:512,width:384,height:128},{x:21600,y:512,width:576,height:128},{x:12320,y:512,width:96,height:128},{x:12832,y:512,width:96,height:128},{x:13344,y:512,width:96,height:128},{x:22464,y:512,width:608,height:128},{x:23328,y:512,width:64,height:128}]},Y={obstacles:[{x:0,y:640,width:224,height:320},{x:4672,y:640,width:736,height:320},{x:6112,y:640,width:256,height:320},{x:7264,y:640,width:448,height:320},{x:12800,y:640,width:320,height:320},{x:14016,y:640,width:352,height:320},{x:14624,y:640,width:352,height:320},{x:15296,y:640,width:320,height:320},{x:16768,y:640,width:448,height:320},{x:17472,y:640,width:544,height:320},{x:18880,y:640,width:416,height:320},{x:25120,y:640,width:416,height:320},{x:9760,y:448,width:64,height:64},{x:9056,y:384,width:64,height:64},{x:8288,y:384,width:64,height:64},{x:9952,y:160,width:64,height:64},{x:10464,y:192,width:64,height:64},{x:10752,y:448,width:64,height:64},{x:11488,y:384,width:64,height:64},{x:12128,y:384,width:64,height:64},{x:22816,y:448,width:64,height:64},{x:20128,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:21760,y:384,width:64,height:128},{x:24448,y:448,width:64,height:64},{x:23136,y:448,width:64,height:64},{x:23904,y:448,width:64,height:64},{x:928,y:384,width:64,height:128},{x:1056,y:384,width:64,height:128},{x:2048,y:448,width:64,height:64},{x:4640,y:256,width:64,height:64},{x:15936,y:640,width:320,height:320},{x:26176,y:640,width:288,height:320},{x:26976,y:640,width:224,height:320},{x:28128,y:640,width:352,height:320},{x:28544,y:640,width:320,height:320},{x:29280,y:640,width:864,height:320},{x:14688,y:480,width:64,height:64},{x:8064,y:96,width:64,height:64},{x:17984,y:448,width:64,height:64},{x:27648,y:192,width:64,height:64},{x:31936,y:640,width:64,height:320},{x:30336,y:640,width:576,height:320},{x:22912,y:448,width:64,height:64},{x:23008,y:384,width:64,height:128},{x:18976,y:352,width:64,height:64},{x:15584,y:320,width:64,height:64},{x:12128,y:128,width:64,height:64}],platforms:[{x:32,y:512,width:3008,height:128},{x:3040,y:448,width:512,height:192},{x:5184,y:320,width:960,height:320},{x:6336,y:128,width:960,height:512},{x:7648,y:448,width:2080,height:192},{x:13088,y:448,width:960,height:192},{x:14336,y:384,width:320,height:256},{x:14944,y:320,width:384,height:320},{x:15584,y:384,width:384,height:256},{x:16224,y:512,width:576,height:128},{x:17184,y:512,width:320,height:128},{x:17984,y:512,width:960,height:128},{x:19264,y:512,width:5888,height:128},{x:3552,y:384,width:544,height:256},{x:4096,y:320,width:608,height:320},{x:9248,y:160,width:608,height:64},{x:10080,y:192,width:352,height:64},{x:10560,y:192,width:704,height:64},{x:11456,y:128,width:640,height:64},{x:13248,y:-96,width:1504,height:64},{x:14976,y:-192,width:13344,height:64},{x:25504,y:576,width:352,height:64},{x:25856,y:512,width:352,height:128},{x:26432,y:448,width:576,height:192},{x:27168,y:320,width:480,height:320},{x:27648,y:256,width:512,height:384},{x:28448,y:160,width:128,height:480},{x:28832,y:512,width:480,height:128},{x:14656,y:544,width:96,height:96},{x:9856,y:448,width:864,height:192},{x:9728,y:512,width:128,height:128},{x:10720,y:512,width:128,height:128},{x:10848,y:448,width:1984,height:192},{x:30016,y:512,width:352,height:128},{x:30880,y:512,width:352,height:128},{x:31360,y:512,width:608,height:128},{x:31232,y:576,width:128,height:64},{x:18944,y:416,width:96,height:224},{x:12224,y:128,width:608,height:64}]},T={obstacles:[{x:0,y:640,width:224,height:320},{x:1760,y:448,width:64,height:64},{x:1792,y:640,width:480,height:320},{x:4e3,y:192,width:64,height:64},{x:6784,y:128,width:64,height:128},{x:7872,y:192,width:64,height:64},{x:8e3,y:192,width:64,height:64},{x:8096,y:192,width:64,height:64},{x:8224,y:192,width:64,height:64},{x:9760,y:128,width:64,height:128},{x:9952,y:192,width:64,height:64},{x:10720,y:128,width:64,height:128},{x:10816,y:192,width:64,height:64},{x:12064,y:480,width:64,height:64},{x:12544,y:480,width:64,height:64},{x:13024,y:480,width:64,height:64},{x:13504,y:480,width:64,height:64},{x:13952,y:640,width:192,height:320},{x:14464,y:480,width:64,height:64},{x:15456,y:480,width:64,height:64},{x:14912,y:640,width:192,height:320},{x:16512,y:480,width:64,height:64},{x:15968,y:640,width:128,height:320},{x:16992,y:640,width:128,height:320},{x:17632,y:480,width:64,height:64},{x:18080,y:640,width:128,height:320},{x:18720,y:480,width:64,height:64},{x:19136,y:640,width:320,height:320},{x:19936,y:480,width:64,height:64},{x:21280,y:480,width:64,height:64},{x:20480,y:640,width:320,height:320},{x:22624,y:480,width:64,height:64},{x:21824,y:640,width:320,height:320},{x:23968,y:480,width:64,height:64},{x:23168,y:640,width:320,height:320},{x:25440,y:416,width:64,height:128},{x:24512,y:640,width:320,height:320},{x:29440,y:480,width:64,height:64},{x:31936,y:640,width:64,height:320},{x:30752,y:640,width:192,height:320},{x:29664,y:640,width:384,height:320},{x:28448,y:640,width:576,height:320},{x:25536,y:416,width:64,height:128},{x:25632,y:416,width:64,height:128},{x:26368,y:480,width:64,height:64},{x:26528,y:480,width:64,height:64},{x:26656,y:480,width:64,height:64},{x:26816,y:480,width:64,height:64},{x:27904,y:480,width:64,height:64},{x:27744,y:480,width:64,height:64},{x:27456,y:480,width:64,height:64},{x:27616,y:480,width:64,height:64}],platforms:[{x:32,y:512,width:1792,height:128},{x:2176,y:544,width:11808,height:96},{x:1920,y:416,width:320,height:64},{x:2752,y:288,width:736,height:64},{x:3552,y:256,width:960,height:64},{x:4608,y:224,width:352,height:64},{x:5024,y:160,width:320,height:64},{x:5504,y:96,width:384,height:64},{x:5984,y:256,width:864,height:64},{x:7072,y:256,width:1792,height:64},{x:9216,y:256,width:1824,height:64},{x:14112,y:544,width:832,height:96},{x:15072,y:544,width:896,height:96},{x:16096,y:544,width:896,height:96},{x:17120,y:544,width:960,height:96},{x:18208,y:544,width:960,height:96},{x:19424,y:544,width:1088,height:96},{x:20768,y:544,width:1088,height:96},{x:22112,y:544,width:1088,height:96},{x:23456,y:544,width:1088,height:96},{x:24800,y:544,width:4064,height:96},{x:28992,y:544,width:704,height:96},{x:30016,y:544,width:768,height:96},{x:30912,y:544,width:1056,height:96}]},L=new class{constructor(){this.levels=[],this.getPlatformsForLevel=(e,t,i)=>{let h=[];for(let r of this.levels[e].platforms){let e=new a.BasicObject(.5*r.x+t,(i.frameHeight-r.height-r.y)*.5,.5*r.width,.5*r.height);e.colour="#3A980B",h.push(e)}return h},this.getObstaclesForLevel=(e,t,i)=>{let h=[];for(let r of this.levels[e].obstacles){let e=new a.BasicObject(.5*r.x+t,(i.frameHeight-r.height-r.y)*.5,.5*r.width,.5*r.height);e.colour="#D10000",h.push(e)}return h},this.levels.push(_),this.levels.push(H),this.levels.push(X),this.levels.push(F),this.levels.push(I),this.levels.push(Y),this.levels.push(T)}},z=()=>L,B=()=>new E({x:150,y:350,height:32,width:32},{x:70,y:200,height:64,width:64});class G extends a.BasicObject{constructor(e,t,i,h){super(e,t,i,h),this.spriteIndex=0,this.spriteRateInSeconds=1/16.7,this.currentSpriteDelta=0,this.spritePositions=[],this.renderOffsetX=-8,this.updateSprite=e=>{this.lastDelta=e,this.currentSpriteDelta+=e,this.onTheGround?0===this.vectorX?this.spriteIndex=0:this.currentSpriteDelta>this.spriteRateInSeconds&&(this.spriteIndex+=1,this.spriteIndex=1+this.spriteIndex%(this.spritePositions.length-2),this.currentSpriteDelta=e-this.spriteRateInSeconds):this.spriteIndex=this.spritePositions.length-1;let t=this.spritePositions[this.spriteIndex];this.sourceX=t.sourceX,this.sourceY=t.sourceY,this.sourceWidth=t.sourceWidth,this.sourceHeight=t.sourceHeight},this.createSpriteMap=()=>{let e=[];for(let t=0;t<10;t++)e.push({sourceX:286*t,sourceY:0,sourceWidth:286,sourceHeight:274});return e},this.positionHistory=[],this.onTheGround=!1,this.alive=!0,this.lastDelta=0,this.source=new Image,this.source.src="./assets/sprites/reindeer.png",this.spritePositions=this.createSpriteMap(),this.renderHeight=51.2,this.renderWidth=64}applyDelta(e,t){this.updateSprite(t),super.applyDelta(e,t)}}class V extends a.BasicObject{constructor(e,t,i,h){super(e,t,i,h),this.onTheGround=!1,this.alive=!0,this.positionHistory=[]}}class E{constructor(e,t){this.requestsReset=!1,this.clicked=()=>{if(0===this.leader.vectorX){this.leader.vectorX=400;let e=this.leader.x;for(;e>this.follower.x;)this.leader.positionHistory.unshift({x:e,y:this.leader.y}),e-=400*this.leader.lastDelta}else this.follower.alive?this.currentCombinedJumps<2&&(this.currentCombinedJumps++,this.leader.vectorY<0&&(this.leader.vectorY=0),this.leader.vectorY+=400,//this.leader.vectorY = jumpVelocityY;
this.leader.onTheGround=!1):this.requestsReset=!0},this.landed=()=>{this.leader.onTheGround=!0,this.currentCombinedJumps=0},this.leader=new G(e.x,e.y,e.width,e.height),this.follower=new V(t.x,t.y,t.width,t.height),this.vortex=new V(t.x+t.width/2,t.y,t.width/2,t.height),this.vortex.alive=!1,this.currentCombinedJumps=2,this.leader.colour="#D10000",this.follower.colour="#D10000"}}const N=()=>({platforms:[],obstacles:[],player:B(),camera:void 0,particles:[],snowClouds:[],snowFall:void 0,shakes:[],world:{gravity:1280,minVerticalVelocityPerSecond:-2560,gravityAccelerationPerSecond:-1280}}),$=(e,t)=>{e.camera=new a.Camera(!0,!0,960,640,t),e.platforms=z().getPlatformsForLevel(0,0,e.camera),e.obstacles=z().getObstaclesForLevel(0,0,e.camera),e.snowFall=new W(e.camera)};class q{constructor(){this.xOffset=-200,this.yOffset=0,this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState,h={x:i.player.leader.x+this.xOffset,y:this.yOffset//gs.player.leader.y + this.yOffset
},r={x:h.x,y:h.y};i.shakes.forEach(e=>{r.x+=e.x,r.y+=e.y}),i.camera&&(i.camera.x=h.x,i.camera.y=h.y,i.camera.frameX=r.x,i.camera.frameY=r.y)}}}class J{constructor(){this.lastLevelLoadedAtX=0,this.currentLevelIndex=0,this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState;for(let e=i.platforms.length-1;e>=0;e--){let t=i.platforms[e];t.x+t.width<i.camera.x-2e3&&(i.platforms.splice(e,1),console.log(`${i.platforms.length} loaded platforms`))}i.camera.x%16e3>14e3&&this.lastLevelLoadedAtX<i.camera.x-3e3&&(this.lastLevelLoadedAtX=i.camera.x,this.loadNextLevel(i))},this.loadNextLevel=e=>{let t=e.camera;this.currentLevelIndex+=1;let i=this.currentLevelIndex;this.currentLevelIndex>6&&(i=6*Math.random()+1),console.log(`Loading level ${i}`);let h=z().getPlatformsForLevel(i,16e3*this.currentLevelIndex,t),r=z().getObstaclesForLevel(i,16e3*this.currentLevelIndex,t);console.log(`Loaded ${r.length} obstacles and ${h.length} plastforms`),e.platforms.push(...h),e.obstacles.push(...r)}}}class U{constructor(){this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState;for(let e=0;e<i.platforms.length;e++){let t=i.platforms[e];t.x,i.player.leader.x,t.x,t.width,i.player.leader.x,(0,a.PhysicsCollisions).doAabbsOverlap(i.player.leader,t)&&((0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,t),i.player.leader.alive&&(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,t)!==a.PhysicsCollisions.CollisionSide.Top?i.player.leader.alive=!1:(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,t)===a.PhysicsCollisions.CollisionSide.Top&&(i.player.leader.onTheGround||i.player.landed(),i.player.leader.y=t.y+t.height,i.player.leader.vectorY=0)),(0,a.PhysicsCollisions).doAabbsOverlap(i.player.follower,t)&&(i.player.follower.alive&&(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.follower,t)!==a.PhysicsCollisions.CollisionSide.Top||(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.follower,t)===a.PhysicsCollisions.CollisionSide.Top&&(i.player.follower.onTheGround||(i.player.follower.onTheGround=!0),i.player.follower.y=t.y+t.height,i.player.follower.vectorY=0))}for(let e=0;e<i.obstacles.length;e++){let t=i.obstacles[e];t.x,i.player.leader.x,t.x,t.width,i.player.leader.x,(0,a.PhysicsCollisions).doAabbsOverlap(i.player.leader,t)&&i.player.leader.alive&&(i.player.leader.alive=!1)}}}}class Q{constructor(){this.executeDelta=(e,t)=>{let i=t.gameState;if(!i.player.leader.alive&&!i.player.follower.alive){i.player.vortex.alive=!1;return}if(i.player.leader.alive&&(i.player.leader.applyDelta(t.gameState.world,e),i.player.leader.renderX=i.player.leader.x+i.player.leader.renderOffsetX,i.player.leader.renderY=i.player.leader.y),0==i.player.leader.vectorX)i.player.follower.applyDelta(t.gameState.world,e),i.player.follower.renderX=i.player.follower.x,i.player.follower.renderY=i.player.follower.y;else{let e=i.player.follower,h=i.player.leader,r=i.player.vortex;if(h.positionHistory.length>0){i.player.leader.alive&&h.positionHistory.push({x:h.x,y:h.y}),e.xPrevious=e.x,e.yPrevious=e.y;let t=h.positionHistory.shift();if(void 0!==t&&(h.alive?e.x=h.x-80:e.x=t.x,e.y=t.y,e.renderX=e.x,e.renderY=e.y,e.positionHistory.push(t)),i.player.follower.positionHistory.length>=i.player.leader.positionHistory.length/2&&(i.player.vortex.alive=!0),i.player.vortex.alive){let t=e.positionHistory.shift();void 0!==t&&(r.x=t.x,r.y=t.y,r.renderX=r.x,r.renderY=r.y)}}else e.alive=!1,//tempData['snow'] = {x:gs.player.leader.x + (gs.player.leader.width/2), y: gs.player.leader.y + (gs.player.leader.height/2) };
t.snow={x:i.player.leader.x,y:i.player.leader.y+i.player.leader.height/2}}}}}class K{constructor(){this.xVectorImpact=12//20;
,this.yVectorImpact=30//50;
,this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState;if(i.player.vortex.alive&&i.snowFall)for(let e=0;e<i.snowFall.particles.length;e++){let t=i.snowFall.particles[e];(0,a.PhysicsCollisions).doAabbsOverlap(i.player.leader,t)&&(t.vectorX+=Math.random()*this.xVectorImpact,t.vectorY+=Math.random()*this.yVectorImpact);/*
				if(CollisionUtils.doAabbsOverlap(gs.player.vortex, p)){
					p.vectorX += Math.random() * this.xVectorImpact;
					p.vectorY += Math.random() * this.yVectorImpact;
				}*/}}}}class Z{constructor(e,t){this.particles=[];for(let i=0;i<70;i++){let i=40+80*Math.random(),h=i/2.5,r=.5+.5*Math.random(),s=.2+.4*Math.random(),l=500*Math.random()-250,d=500*Math.random()-250,o=new a.Particle(e,t,h,h,i,i,l,d,r,0,255,255,255,s);o.obeysGravity=!1,o.circle=!0,this.particles.push(o)}for(let i=0;i<45;i++){let i=5+5*Math.random(),h=-200+400*Math.random(),r=100+300*Math.random(),s=new a.Particle(e,t,i,i,i,i,h,r,1,1,255,255,255,30);s.gravityScale=.2,this.particles.push(s)}}applyDelta(e,t){for(let i=this.particles.length-1;i>=0;i--){let h=this.particles[i];h.applyDelta(e,t),h.alive||this.particles.splice(i,1)}}}class ee{constructor(){this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState;if(t.snow){let e=t.snow;i.snowClouds.push(new Z(e.x,e.y)),i.shakes.push(new a.Shake(3,.8))}for(let t=i.snowClouds.length-1;t>=0;t--){let h=i.snowClouds[0];if(h.particles.length>0){for(let t of(h.applyDelta(i.world,e),h.particles))if(t.obeysGravity){for(let e of i.platforms)if((0,a.PhysicsCollisions).doAabbsOverlap(t,e)){(0,a.PhysicsCollisions).doesAabbOverlapOccurInCurrentDelta(t,e)||(t.alive=!1);let i=(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(t,e);i===a.PhysicsCollisions.CollisionSide.Top?(t.vectorX=0,t.vectorY=0,t.y=e.y+e.height):i===a.PhysicsCollisions.CollisionSide.Bottom?(t.vectorY=0,t.y=e.y-t.height):i===a.PhysicsCollisions.CollisionSide.Right?(t.vectorX=0,t.x=e.x+e.width):(t.vectorX=0,t.x=e.x-t.width)}}}else i.snowClouds.splice(t,1)}}}}class et{constructor(){this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState,h=i.snowFall;if(h&&h.particles.length>0){for(let t of(h.applyDelta(i.world,e,i.camera),h.particles))if(t.obeysGravity){for(let e of i.platforms)if((0,a.PhysicsCollisions).doAabbsOverlap(t,e)){//if(!CollisionUtils.doesAabbOverlapOccurInCurrentDelta(p, platform)){
//p.alive = false;
//}
let i=(0,a.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(t,e);i===a.PhysicsCollisions.CollisionSide.Top?(t.vectorX=0,t.vectorY=0,t.y=e.y+e.height):i===a.PhysicsCollisions.CollisionSide.Bottom?(t.vectorY=0,t.y=e.y-t.height):i===a.PhysicsCollisions.CollisionSide.Right?(t.vectorX=0,t.x=e.x+e.width):(t.vectorX=0,t.x=e.x-t.width)}}}}}}class ei{constructor(e){this.executeDelta=(e,t)=>{let i=t.canvasContext;i.beginPath(),i.fillStyle=this.color,i.fillRect(0,0,i.canvas.width,i.canvas.height)},this.color=e}}class eh{constructor(){this.direction=1,this.x=130,this.minX=100,this.maxX=200,this.executeDelta=(e,t)=>{let i=t.canvasContext;i.setTransform(1,0,0,1,0,0),i.clearRect(0,0,i.canvas.width,i.canvas.height)}}}const er=(e,t)=>{let i=e.canvasContext,h=e.gameState,r=h.camera;t.forEach(e=>{!(e.renderX>r.x+r.frameWidth)&&(e.renderX+e.renderWidth<r.x||(e.circle?(0,a.Renderer).renderCircle(e,r,i):(0,a.Renderer).renderRect(e,r,i)))})};class es{executeDelta(e,t){let i=t.gameState;i.obstacles&&er(t,i.obstacles)}}class ea{executeDelta(e,t){let i=t.gameState;i.platforms&&er(t,i.platforms)}}class el{executeDelta(e,t){let i=t.canvasContext;i.fillStyle="#D10000";let h=t.gameState,r=h.camera;if(!h.player.leader.alive&&!h.player.follower.alive)return;i.beginPath();//renderSprite(gs.player.leader, ctx, camera);
//renderSprite(gs.player.follower, ctx, camera);
let s=ed(h.player.leader.vectorY,Math.abs(h.world.minVerticalVelocityPerSecond));if(//make the angle relative to X velocity
s*=h.player.leader.vectorX/400,h.player.leader.source){if((0,a.Renderer).renderRotatedSprite(h.player.leader,s,r,i),t.debug){let e={...h.player.leader};e.renderX=e.x,e.renderY=e.y,e.renderWidth=e.width,e.renderHeight=e.height,e.colour="rgba(5, 0, 0, 0.3)",(0,a.Renderer).renderRotatedRect(e,s,r,i)}}else(0,a.Renderer).renderRotatedRect(h.player.leader,s,r,i);let l=ed((h.player.follower.y-h.player.follower.yPrevious)/e,Math.abs(h.world.minVerticalVelocityPerSecond)),d=(h.player.follower.x-h.player.follower.xPrevious)/e;l*=d/400,(0,a.Renderer).renderRotatedRect(h.player.follower,l,r,i);//renderRect(gs.player.vortex, camera, ctx);
}}const ed=(e,t)=>90*(e/t)// const renderSpriteAngled = (sprite:ISprite, angle:number, ctx:CanvasRenderingContext2D, camera:Camera) => {
;class eo{constructor(){this.executeDelta=(e,t)=>{let i=t.canvasContext,h=t.gameState,r=h.camera,s=new Path2D;s.rect(r.xOffset,r.yOffset,r.frameWidth*r.pixelToFrameRatio,r.frameHeight*r.pixelToFrameRatio),i.clip(s);/*ctx.beginPath();
		ctx.rect(
			camera.xOffset, 
			camera.yOffset, 
			camera.frameWidth*camera.pixelToFrameRatio,
			camera.frameHeight*camera.pixelToFrameRatio);
		
		ctx.clip();*/}}}class en{executeDelta(e,t){let i=t.gameState;for(let e of i.snowClouds)er(t,e.particles)}}class ec{executeDelta(e,t){let i=t.gameState;i.snowFall&&er(t,i.snowFall.particles)}}class ey{constructor(){this.executeDelta=(e,t)=>{t.canvasContext;let i=t.gameState;i.shakes.forEach((t,h)=>{t.applyDelta(i.world,e),t.remove&&i.shakes.splice(h,1)})}}}//not sure this one makes sense?
//the scene will just bind listeners once, then check the state of the input handler.
//so no pipe needed
class ex{executeDelta(e,t){t.debug=!0}}class eg extends a.BaseScene{constructor(e,t){super(),this.stop=()=>{this.runner.stop(),this.resizeCallback=()=>{},this.canvasContext.canvas.removeEventListener("pointerdown",this.userClicked)},this.step=e=>{if(e*=1.1,//resize canvas
this.resizeCallback(),this.gameState.camera?.setCanvasSize(this.canvasContext),this.gameState.player.requestsReset){this.stop(),this.complete();return}this.pipeline.execute(e,this.gameState)},this.bindUICapture=()=>{this.canvasContext.canvas.addEventListener("pointerdown",this.userClicked,{passive:!0});//document.body.addEventListener('mousedown', this.userClicked, true); 
//document.body.addEventListener('touchstart', this.userClicked, true); 
},this.userClicked=()=>{this.gameState.player.clicked()},this.canvasContext=e,this.resizeCallback=t,this.pipeline=new a.Pipeline.Pipeline(this.canvasContext),this.gameState=N(),this.setup()}setup(){$(this.gameState,this.canvasContext),// add input pipes
this.pipeline.addPipe(new ex),// add physics pipes
this.pipeline.addPipe(new Q),this.pipeline.addPipe(new U),this.pipeline.addPipe(new ee),this.pipeline.addPipe(new et),this.pipeline.addPipe(new K),this.pipeline.addPipe(new ey),this.pipeline.addPipe(new q),this.pipeline.addPipe(new J),// add render pipes
//this.pipeline.addPipe(new CalculateDislayRatio());
this.pipeline.addPipe(new eo),//this.pipeline.addPipe(new CameraTransformPipe());
this.pipeline.addPipe(new eh),this.pipeline.addPipe(new ei("#1e2640")),//this.pipeline.addPipe(new CanvasShakePipe('camera-effects'));
//this.pipeline.addPipe(new DrawTestPipe());
this.pipeline.addPipe(new ea),this.pipeline.addPipe(new es),this.pipeline.addPipe(new el),this.pipeline.addPipe(new en),this.pipeline.addPipe(new ec),this.bindUICapture(),//launch the game loop
this.runner=new M.VariableStepRunner(this.step,1/90);//this.runnerStopCallback = fixedStepRunner(this.step, 1000/100);
//const runnerStopCallback = manualStepRunner(step, 20);
}}class ew{constructor(e,t){this.sceneComplete=e=>{this.activeScene.removeSceneSubscriber(this),this.launchDemoScene()},this.launchDemoScene=()=>{this.activeScene=new eg(this.canvasContext,this.resizeCallback),this.activeScene.addSceneSubscriber(this)},this.canvasContext=e,this.resizeCallback=t,this.launchDemoScene()}}(()=>{let e=document.body,{canvas:t,context:i,resizeCallback:h}=(0,s.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback)("game-canvas",e);//set initial canvas size.
h(),new ew(i,h)})();